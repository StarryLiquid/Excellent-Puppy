#include "Chair.hpp"

#include "../../models/ModelNV.hpp"
#include "../../models/geometries/QuadGeometry.hpp"
#include "../SimpleEntity.hpp"

using namespace ExcellentPuppy::Entities;

const GLfloat CHAIR_COLLISION_RADIUS = std::sqrt(0.8*0.8*2);
const GEnv CHAIR_SPECS[] = {
	{ //0
		{-0.3482, 0.8704, 0.3482},
		{-0.8, 2.0, 0.8},
	},
	{ //1
		{0.7071, 0.0, 0.7071},
		{0.8, 2.0, 0.8},
	},
	{ //2
		{-0.3482, 0.8704, -0.3482},
		{-0.8, 2.0, -0.8},
	},
	{ //3
		{0.7071, 0.0, -0.7071},
		{0.8, 2.0, -0.8},
	},
	{ //4
		{-0.5773, 0.5773, -0.5773},
		{-1.0, 2.2, -1.0},
	},
	{ //5
		{-0.5773, 0.5773, 0.5773},
		{-1.0, 2.2, 1.0},
	},
	{ //6
		{0.5773, 0.5773, 0.5773},
		{1.0, 2.2, 1.0},
	},
	{ //7
		{0.5773, 0.5773, -0.5773},
		{1.0, 2.2, -1.0},
	},
	{ //8
		{-0.5773, -0.5773, -0.5773},
		{-1.0, 2.0, -1.0},
	},
	{ //9
		{-0.5773, -0.5773, 0.5773},
		{-1.0, 2.0, 1.0},
	},
	{ //10
		{0.5773, -0.5773, 0.5773},
		{1.0, 2.0, 1.0},
	},
	{ //11
		{0.5773, -0.5773, -0.5773},
		{1.0, 2.0, -1.0},
	},
	{ //12
		{-0.3560, 0.8900, -0.2848},
		{-0.8, 2.0, -0.6},
	},
	{ //13
		{-0.3560, 0.8900, 0.2848},
		{-0.8, 2.0, 0.6},
	},
	{ //14
		{-0.2848, 0.8900, 0.3560},
		{-0.6, 2.0, 0.8},
	},
	{ //15
		{-0.7071, 0.0, 0.7071},
		{0.6, 2.0, 0.8},
	},
	{ //16
		{0.7071, 0.0, -0.7071},
		{0.8, 2.0, 0.6},
	},
	{ //17
		{0.7071, 0.0, 0.7071},
		{0.8, 2.0, -0.6},
	},
	{ //18
		{-0.7071, 0.0, -0.7071},
		{0.6, 2.0, -0.8},
	},
	{ //19
		{-0.2848, 0.8900, -0.3560},
		{-0.6, 2.0, -0.8},
	},
	{ //20
		{-0.2915, 0.9110, 0.2915},
		{-0.6, 2.0, 0.6},
	},
	{ //21
		{-0.7071, 0.0, -0.7071},
		{0.6, 2.0, 0.6},
	},
	{ //22
		{-0.2915, 0.9110, -0.2915},
		{-0.6, 2.0, -0.6},
	},
	{ //23
		{-0.7071, 0.0, 0.7071},
		{0.6, 2.0, -0.6},
	},
	{ //24
		{-0.7071, 0.0, -0.7071},
		{-0.8, 2.0, 0.6},
	},
	{ //25
		{-0.7071, 0.0, 0.7071},
		{-0.8, 2.0, 0.8},
	},
	{ //26
		{0.7071, 0.0, -0.7071},
		{-0.6, 2.0, -0.8},
	},
	{ //27
		{-0.7071, 0.0, -0.7071},
		{-0.8, 2.0, -0.8},
	},
	{ //28
		{-0.7071, 0.0, 0.7071},
		{-0.8, 2.0, -0.6},
	},
	{ //29
		{0.7071, 0.0, 0.7071},
		{-0.6, 2.0, 0.8},
	},
	{ //30
		{0.7071, 0.0, -0.7071},
		{-0.6, 2.0, 0.6},
	},
	{ //31
		{0.7071, 0.0, 0.7071},
		{-0.6, 2.0, -0.6},
	},
	{ //32
		{-0.5773, -0.5773, 0.5773},
		{0.6, 0.0, 0.8},
	},
	{ //33
		{0.5773, -0.5773, 0.5773},
		{0.8, 0.0, 0.8},
	},
	{ //34
		{0.5773, -0.5773, 0.5773},
		{0.8, 0.0, -0.6},
	},
	{ //35
		{0.5773, -0.5773, -0.5773},
		{0.8, 0.0, -0.8},
	},
	{ //36
		{0.5773, -0.5773, -0.5773},
		{0.8, 0.0, 0.6},
	},
	{ //37
		{-0.5773, -0.5773, -0.5773},
		{0.6, 0.0, -0.8},
	},
	{ //38
		{-0.5773, -0.5773, -0.5773},
		{0.6, 0.0, 0.6},
	},
	{ //39
		{-0.5773, -0.5773, 0.5773},
		{0.6, 0.0, -0.6},
	},
	{ //40
		{-0.5773, -0.5773, -0.5773},
		{-0.8, 0.0, 0.6},
	},
	{ //41
		{-0.5773, -0.5773, 0.5773},
		{-0.8, 0.0, 0.8},
	},
	{ //42
		{0.5773, -0.5773, -0.5773},
		{-0.6, 0.0, -0.8},
	},
	{ //43
		{-0.5773, -0.5773, -0.5773},
		{-0.8, 0.0, -0.8},
	},
	{ //44
		{-0.5773, -0.5773, 0.5773},
		{-0.8, 0.0, -0.6},
	},
	{ //45
		{0.5773, -0.5773, 0.5773},
		{-0.6, 0.0, 0.8},
	},
	{ //46
		{0.5773, -0.5773, -0.5773},
		{-0.6, 0.0, 0.6},
	},
	{ //47
		{0.5773, -0.5773, 0.5773},
		{-0.6, 0.0, -0.6},
	},
	{ //48
		{0.7071, 0.0, -0.7071},
		{1.0, 2.2, -1.0},
	},
	{ //49
		{0.7071, 0.0, 0.7071},
		{1.0, 2.2, -0.8},
	},
	{ //50
		{-0.7071, 0.0, -0.7071},
		{0.8, 2.2, -1.0},
	},
	{ //51
		{-0.7071, 0.0, 0.7071},
		{0.8, 2.2, -0.8},
	},
	{ //52
		{0.5773, 0.5773, 0.5773},
		{1.0, 3.7, -0.8},
	},
	{ //53
		{0.5773, 0.5773, -0.5773},
		{1.0, 3.7, -1.0},
	},
	{ //54
		{0.0, 0.7071, -0.7071},
		{0.8, 3.7, -1.0},
	},
	{ //55
		{0.0, 0.7071, 0.7071},
		{0.8, 3.7, -0.8},
	},
	{ //56
		{0.0, 0.0, -1.0},
		{-0.8, 2.2, -1.0},
	},
	{ //57
		{0.0, 0.0, 1.0},
		{-0.8, 2.2, -0.8},
	},
	{ //58
		{-0.7071, 0.0, -0.7071},
		{-1.0, 2.2, -1.0},
	},
	{ //59
		{-0.7071, 0.0, 0.7071},
		{-1.0, 2.2, -0.8},
	},
	{ //60
		{0.0, 0.4472, 0.8944},
		{-0.8, 3.7, -0.8},
	},
	{ //61
		{0.0, 0.4472, -0.8944},
		{-0.8, 3.7, -1.0},
	},
	{ //62
		{-0.5773, 0.5773, -0.5773},
		{-1.0, 3.7, -1.0},
	},
	{ //63
		{-0.5773, 0.5773, 0.5773},
		{-1.0, 3.7, -0.8},
	},
	{ //64
		{0.7071, 0.0, 0.7071},
		{-0.8, 2.2, -0.8},
	},
	{ //65
		{0.7071, 0.0, -0.7071},
		{-0.8, 2.2, -1.0},
	},
	{ //66
		{0.7071, 0.0, 0.7071},
		{-0.8, 3.7, -0.8},
	},
	{ //67
		{0.7071, 0.0, -0.7071},
		{-0.8, 3.7, -1.0},
	},
	{ //68
		{-0.3015, -0.3015, 0.9045},
		{0.8, 3.5, -0.8},
	},
	{ //69
		{0.0, 0.7071, 0.7071},
		{-0.8, 3.7, -0.8},
	},
	{ //70
		{0.6666, -0.3333, 0.6666},
		{-0.8, 3.5, -0.8},
	},
	{ //71
		{0.6666, -0.3333, -0.6666},
		{-0.8, 3.5, -1.0},
	},
	{ //72
		{0.0, 0.7071, -0.7071},
		{-0.8, 3.7, -1.0},
	},
	{ //73
		{-0.5773, -0.5773, -0.5773},
		{0.8, 3.5, -1.0},
	},
	{ //74
		{0.0, 0.0, -1.0},
		{-0.8, 3.5, -1.0},
	},
	{ //75
		{0.0, 0.0, 1.0},
		{-0.8, 3.5, -0.8},
	},
};
const GEquad CHAIR_QUADS[] = {
	{17, 23, 39, 34},
	{11, 8, 4, 7},
	{9, 10, 6, 5},
	{10, 11, 7, 6},
	{8, 9, 5, 4},
	{31, 28, 44, 47},
	{19, 22, 31, 26},
	{13, 20, 30, 24},
	{8, 11, 10, 9},
	{24, 30, 46, 40},
	{3, 17, 34, 35},
	{20, 14, 29, 30},
	{0, 13, 24, 25},
	{22, 12, 28, 31},
	{2, 19, 26, 27},
	{14, 0, 25, 29},
	{12, 2, 27, 28},
	{39, 37, 35, 34},
	{32, 38, 36, 33},
	{41, 40, 46, 45},
	{44, 43, 42, 47},
	{30, 29, 45, 46},
	{16, 1, 33, 36},
	{23, 18, 37, 39},
	{26, 31, 47, 42},
	{25, 24, 40, 41},
	{18, 3, 35, 37},
	{27, 26, 42, 43},
	{28, 27, 43, 44},
	{15, 21, 38, 32},
	{1, 15, 32, 33},
	{21, 16, 36, 38},
	{29, 25, 41, 45},
	{51, 49, 52, 55},
	{55, 52, 53, 54},
	{49, 48, 53, 52},
	{50, 54, 53, 48},
	{4, 5, 6, 7},
	{59, 57, 60, 63},
	{63, 60, 61, 62},
	{56, 61, 67, 71},
	{56, 58, 62, 61},
	{58, 59, 63, 62},
	{60, 57, 64, 70},
	{61, 60, 66, 67},
	{57, 56, 65, 64},
	{55, 54, 72, 69},
	{70, 71, 67, 66},
	{65, 71, 70, 64},
	{54, 73, 74, 72},
	{68, 55, 69, 75},
	{50, 51, 68, 73},
	{68, 70, 71, 73},
};

SimpleEntity* Chair::createChair(Modeling::Material* chairMaterial) {
	auto chairModel = new ExcellentPuppy::Modeling::ModelNV(CHAIR_SPECS, {new ExcellentPuppy::Modeling::QuadGeometry(CHAIR_QUADS, sizeof(CHAIR_QUADS)/sizeof(GEquad))});
	chairModel->setMaterial(chairMaterial);
	auto chairEntity = new SimpleEntity(chairModel);
	chairEntity->setCollisionRadius(CHAIR_COLLISION_RADIUS);
	chairEntity->getDependents()->insert(chairModel);
	return chairEntity;
}
